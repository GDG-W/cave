name: Shared Build Workflow

on:
  workflow_call:
    inputs:
      package-name:
        description: 'The name of the package to build (e.g. conferenceapp)'
        required: true
        type: string
      android-build:
        description: 'Whether to build Android APK'
        required: false
        default: false
        type: boolean
      ios-build:
        description: 'Whether to build iOS IPA'
        required: false
        default: false
        type: boolean
      changelog:
        description: 'Changelog for the release'
        required: false
        type: string
      build-version:
        description: 'Version number for the release'
        required: false
        default: '1.0.0' 
        type: string
      build-number:
        description: 'Build number for the release'
        required: false
        default: '1'
        type: string
    secrets:
      CREDENTIAL_FILE_CONTENT:
        required: false
      FIREBASE_APP_ID:
        required: false
      # APP_STORE_CONNECT_ISSUER_ID:
      #   required: false
      # APP_STORE_CONNECT_KEY_IDENTIFIER:
      #   required: false
      # APP_STORE_CONNECT_PRIVATE_KEY:
      #   required: false
      # CERTIFICATE_PRIVATE_KEY:
      #   required: false
      # SSH_PRIVATE_KEY:
      #   required: false

jobs:
  check-formatting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            packages/${{ inputs['package-name'] }}/.dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('packages/${{ inputs["package-name"] }}/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get
        working-directory: packages/${{ inputs['package-name'] }}

      - name: Check formatting
        run: dart format --set-exit-if-changed .
        working-directory: packages/${{ inputs['package-name'] }}

      - name: Run Linter
        run: flutter analyze
        working-directory: packages/${{ inputs['package-name'] }}

  android-build:
    if: inputs.android-build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Java 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            packages/${{ inputs['package-name'] }}/.dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('packages/${{ inputs["package-name"] }}/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'

      - name: Install dependencies
        run: flutter pub get
        working-directory: packages/${{ inputs['package-name'] }}

      - name: Build Android
        run: flutter build apk --release --build-name=${{ inputs.build-version }} --build-number=${{ inputs.build-number }}
        working-directory: packages/${{ inputs['package-name'] }}

      - name: Deploy Android to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: testers
          file: packages/${{ inputs['package-name'] }}/build/app/outputs/flutter-apk/app-release.apk
          releaseNotes: ${{ inputs.changelog }}

  # ios-build:
  #   if: inputs.ios-build == 'true'
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
      
  #     - name: Cache CocoaPods dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cocoapods
  #           ios/Pods
  #         key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pods-
      
  #     - name: Cache Flutter dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.pub-cache
  #           packages/${{ inputs['package-name'] }}/.dart_tool
  #         key: ${{ runner.os }}-pub-${{ hashFiles('packages/${{ inputs["package-name"] }}/pubspec.yaml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pub-

  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.24.3'

  #     - name: Install dependencies
  #       run: flutter pub get
  #       working-directory: packages/${{ inputs['package-name'] }}
      
  #     - name: Install Codemagic CLI tools
  #       run: pip install codemagic-cli-tools
  #       working-directory: packages/${{ inputs['package-name'] }}
      
  #     - name: Set up keychain
  #       run: keychain initialize
  #       working-directory: packages/${{ inputs['package-name'] }}

  #     - name: Fetch signing files from App Store Connect
  #       run: |
  #         app-store-connect fetch-signing-files $(xcode-project detect-bundle-id) \
  #         --type IOS_APP_STORE \
  #         --create
  #       working-directory: packages/${{ inputs['package-name'] }}

  #     - name: Set up signing certificate in keychain
  #       run: keychain add-certificates
  #       working-directory: packages/${{ inputs['package-name'] }}

  #     - name: Set up code signing in Xcode project
  #       run: xcode-project use-profiles
  #       working-directory: packages/${{ inputs['package-name'] }}

  #     - name: Build iOS
  #       run: flutter build ipa --export-options-plist=$HOME/export_options.plist --build-name=${{ inputs.build-version }} --build-number=${{ inputs.build-number }}
  #       working-directory: packages/${{ inputs['package-name'] }}
      
  #     - name: Deploy iOS to Firebase
  #       uses: wzieba/Firebase-Distribution-Github-Action@v1
  #       with:
  #         appId: ${{ secrets.FIREBASE_APP_ID }}
  #         serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
  #         groups: testers
  #         file: packages/${{ inputs['package-name'] }}/build/ios/ipa/*.ipa
  #         releaseNotes: ${{ inputs.changelog }}
